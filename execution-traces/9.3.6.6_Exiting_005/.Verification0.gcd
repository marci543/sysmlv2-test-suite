package exiting005
import "/hu.bme.mit.gamma.sysml.testmodel/PSSM/9.3.6.6_Exiting_005/.Verification0Declarations.gcd"
scheduled-async Exiting005 [
	port startPort : provides Start
	port continuePort : provides Continue
	port pendingPort : provides Pending
	port generalPort : provides General
	port S2_1_exit : provides Trace
	port S1_1_exit : provides Trace
	port S1_exit : provides Trace
	port T2_2_effect : provides Trace
	port T3_testEnd : provides Trace
] {
	component ^statechart : ^statechart
	bind startPort -> ^statechart.startPort
	bind continuePort -> ^statechart.continuePort
	bind pendingPort -> ^statechart.pendingPort
	bind generalPort -> ^statechart.generalPort
	bind S1_exit -> ^statechart.S1_exit
	bind S1_1_exit -> ^statechart.S1_1_exit
	bind S2_1_exit -> ^statechart.S2_1_exit
	bind T2_2_effect -> ^statechart.T2_2_effect
	bind T3_testEnd -> ^statechart.T3_testEnd
}
adapter ^statechart of component Exiting005_StatechartStatechart : Exiting005_StatechartStatechart
{
	when any / run
	queue statechartQueue (priority = 1, capacity = 4) {
		startPort.any, continuePort.any, pendingPort.any, generalPort.any
	}
}
@RegionSchedule = bottom-up
@TransitionPriority = value-based
@GuardEvaluation = beginning-of-step statechart Exiting005_StatechartStatechart [
	port startPort : provides Start
	port continuePort : provides Continue
	port pendingPort : provides Pending
	port generalPort : provides General
	port S2_1_exit : provides Trace
	port S1_1_exit : provides Trace
	port S1_exit : provides Trace
	port T2_2_effect : provides Trace
	port T3_testEnd : provides Trace
] {
	var eventCounter : integer := 0
	var TRANSITION__TO__wait : Transition := Transition::T1
	var TRANSITION__TO__S1_1 : Transition := Transition::T1_1
	var TRANSITION__TO__S2_1 : Transition := Transition::T2_1
	var s11finished : boolean := false
	region SubExiting005 {
		state wait
		state S1 {
			exit / {
				eventCounter := eventCounter + 1;
				raise S1_exit.out_OutSignal(eventCounter);
			}
			region ParentS1Left {
				state S1Left {
					region SubS1Left {
						state S1_1 {
							exit / {
								eventCounter := eventCounter + 1;
								raise S1_1_exit.out_OutSignal(eventCounter);
								s11finished := true;
							}
						}
						initial InitialS1LeftOfSubS1Left
						state FinalStateOfSubS1Left
					}
				}
				initial InitialS1LeftOfParentS1Left
			}
			region ParentS1Right {
				state S1Right {
					region SubS1Right {
						state S2_1 {
							exit / {
								eventCounter := eventCounter + 1;
								raise S2_1_exit.out_OutSignal(eventCounter);
							}
						}
						initial InitialS1RightOfSubS1Right
						state FinalStateOfSubS1Right
					}
				}
				initial InitialS1RightOfParentS1Right
			}
		}
		initial InitialExiting005OfSubExiting005
		state FinalStateOfSubExiting005
	}
	@(T1)
	transition (1) from InitialExiting005OfSubExiting005 to wait
	transition (2) from InitialS1RightOfParentS1Right to S1Right
	@(T1_1)
	transition (3) from InitialS1LeftOfSubS1Left to S1_1
	transition (2) from InitialS1LeftOfParentS1Left to S1Left
	@(T2_1)
	transition (3) from InitialS1RightOfSubS1Right to S2_1
	@(T2)
	transition (1) from wait to S1 when startPort.in_StartSignal
	@(T1_2)
	transition (3) from S1_1 to FinalStateOfSubS1Left when generalPort.in_GeneralSignal [s11finished]
	@(T2_2)
	transition (3) from S2_1 to FinalStateOfSubS1Right when pendingPort.in_PendingSignal / {
		eventCounter := eventCounter + 1;
		raise T2_2_effect.out_OutSignal(eventCounter);
	}
	@(T3)
	transition (1) from S1 to FinalStateOfSubExiting005 when continuePort.in_ContinueSignal / {
		eventCounter := eventCounter + 1;
		raise T3_testEnd.out_OutSignal(eventCounter);
	}
}